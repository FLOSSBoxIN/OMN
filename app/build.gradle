apply plugin: 'com.android.application'

android {
    applicationVariants.all { variant ->
        if (variant.buildType.name == 'debug') {
            def rev = getGitRevParseInfo("describe --tags --abbrev=1")
            variant.mergedFlavor.versionName = rev.reverse().take(rev.length() - 1).reverse();
        } else if (variant.buildType.name == 'betta') {
            //   def rev = getGitRevParseInfo("describe --tags --abbrev=1")
            //variant.mergedFlavor.versionName = versionName + getGitRevParseInfo("rev-parse --short");
        }
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "OpenMarkdownNote." + versionName + ".apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }

    }
    compileSdkVersion 25
    buildToolsVersion '26.0.0'
    defaultConfig {
        applicationId "net.basov.omn"
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 600
        versionName "00.06.00"
    }
    signingConfigs {
        release {
            keyAlias 'mvb_key'
            storeFile file('../../.keys/mvb-release.keystore')
            v2SigningEnabled false
        }
        debug {
            storeFile file('../../.keys/mvb-debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            applicationIdSuffix '.r'
            versionNameSuffix 'r'
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.release
        }
        betta {
            applicationIdSuffix '.b'
            versionNameSuffix '-b-' + getGitRevParseInfo("rev-parse --short")
            debuggable true
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
        debug {
            debuggable true
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
    }
    productFlavors {
        main {
        }
        legacy {
            minSdkVersion 17
            targetSdkVersion 20
            versionNameSuffix '-legacy'
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile fileTree(include: ['*.jar'], dir: 'libs')
}

def getGitRevParseInfo (what) {
    def cmd = "git " + what + " HEAD"
    def proc = cmd.execute ()
    proc.text.trim ()
}
